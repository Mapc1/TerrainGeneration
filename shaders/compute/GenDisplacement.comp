#version 460

layout (local_size_x=1, local_size_y=1, local_size_z=1) in;

// Input textures
uniform sampler2D CONTINENTAL_MAP;
uniform sampler2D EROSION_MAP;
uniform sampler2D PEAKS_AND_VALLEYS_MAP;

// Output texture
uniform writeonly image2D DISPLACEMENT_MAP;

// Pending name
uniform float DRAG_AMOUNT = 0.01;
uniform float DISPLACEMENT_STRENGTH = 1000.0;
uniform float CONTINENTAL_POWER = 5.0;
uniform float EROSION_POWER = 1.0;
uniform float PEAKS_AND_VALLEYS_POWER = 1.0;


const vec2 NOISE_PERIOD = vec2(100.0,100.0);


float cnoise(vec2 P);
float pnoise(vec2 P, vec2 rep);
float getContinental(float noise, float factor);
float getErosion(float noise, float factor);
float getPeaksNValleys(float noise, float factor);


float getDisplacement(vec2 coords) {
  vec2 tex_coords = coords / textureSize(CONTINENTAL_MAP, 0);

  float continental_noise = texture(CONTINENTAL_MAP, tex_coords).r;
  float erosion_noise = texture(EROSION_MAP, tex_coords).r;
  float peaks_and_valleys_noise = texture(PEAKS_AND_VALLEYS_MAP, tex_coords).r;

  return (getContinental(continental_noise, CONTINENTAL_POWER) + getErosion(erosion_noise, EROSION_POWER) + getPeaksNValleys(peaks_and_valleys_noise, PEAKS_AND_VALLEYS_POWER)) / 3 * DISPLACEMENT_STRENGTH;

//  return getPeaksNValleys(peaks_and_valleys_noise, getErosion(erosion_noise, getContinental(continental_noise,DISPLACEMENT_STRENGTH)));
  //return getContinental(tex_coords.x * 2 -1, DISPLACEMENT_STRENGTH);
  //return getErosion(tex_coords.x * 2 - 1, DISPLACEMENT_STRENGTH);
}

vec4 calcDisplacementAndNormal(vec2 noiseCoord) {
    const vec3 offset = vec3(-1, 0, 1);
    const vec2 size = vec2(2.0,0.0);

    vec2 offxy = vec2(offset.x , offset.y);
    vec2 offzy = vec2(offset.z , offset.y);
    vec2 offyx = vec2(offset.y , offset.x);
    vec2 offyz = vec2(offset.y , offset.z);

    float displacement = getDisplacement(noiseCoord);

    float s11 = displacement;
    float s01 = getDisplacement(noiseCoord+offxy);
    float s21 = getDisplacement(noiseCoord+offzy);
    float s10 = getDisplacement(noiseCoord+offyx);
    float s12 = getDisplacement(noiseCoord+offyz);
    vec3 va = normalize(vec3(size.x, s21-s01, size.y));
    vec3 vb = normalize(vec3(size.y, s12-s10, -size.x));

    return vec4(cross(va,vb), displacement);
}

void main() {
    ivec2 write_location = ivec2(gl_GlobalInvocationID.xy);

    vec4 displacement_and_normal = calcDisplacementAndNormal(write_location);
    vec3 normal = displacement_and_normal.xyz;
    float height = displacement_and_normal.w;

    imageStore(DISPLACEMENT_MAP, write_location, vec4(normal,height));
}